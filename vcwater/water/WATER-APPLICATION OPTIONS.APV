[APPLICATION]
VERSION 33
TODO Clarion ToDo
PROCEDURE Main
[COMMON]
FROM Clarion
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('ErrorManager', 'ErrorStatusManager', 'FuzzyMatcher', |
  'INIManager', 'Translator')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 0

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 0

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%ProgramAuthor DEFAULT  ('')
%ProgramIcon DEFAULT  ('')
%MessageDescription LONG  (1)
%GlobalExternal LONG  (0)
%ExternalSource DEFAULT  ('Statically Linked Library (LIB)')
%GenerateEmbedComments LONG  (0)
%INIType DEFAULT  ('NVD_INI')
%INIFile DEFAULT  ('Program Name.INI')
%ININame DEFAULT  ('')
%INIProgramIniLocation DEFAULT  ('APPDIR')
%INICSIDLDirectory DEFAULT  ('SV:CSIDL_PERSONAL')
%CSIDLCompanyDir DEFAULT  ('')
%CSIDLProductDir DEFAULT  ('')
%CSIDLCreate LONG  (0)
%INIInAppDirectory LONG  (0)
%REGRoot DEFAULT  ('REG_CLASSES_ROOT')
%DisableINISaveWindow LONG  (0)
%PreserveVars MULTI LONG  ()
%PreserveVar DEPEND %PreserveVars DEFAULT TIMES 0

%EnableExceptionMessage LONG  (0)
%EnableRunTimeTranslator LONG  (0)
%FuzzyMatchingEnabled LONG  (1)
%IgnoreCase LONG  (1)
%WordOnly LONG  (0)
%WindowFrameDragging LONG  (0)
%UseDefaultXPManifest LONG  (0)
%GenerateXPManifest LONG  (0)
%LinkGenerateXPManifest LONG  (0)
%AddVistaXPManifest LONG  (0)
%VistaManifestExecutionLevel DEFAULT  ('asInvoker')
%VistaManifestUIAccess LONG  (0)
%NoThemedControlsDependency LONG  (0)
%W7ManifestVista LONG  (0)
%W7ManifestW7 LONG  (0)
%ForceMakeTransparentXPManifest LONG  (0)
%ForceMakeColorXPManifest LONG  (0)
%ForceSHEETNoTheme LONG  (0)
%ExtUIXPMenuEnableGlobal LONG  (0)
%ExtUIXPMenuColorTypeGlobal DEFAULT  ('OFF')
%ExtUIXPMenuDisableImageBar LONG  (1)
%ExtUIXPMenuEnableRuntime LONG  (0)
%ExtUIXPMenuRuntimeVar DEFAULT  ('')
%ExtUIXPMenuColorLeftGlobal LONG  (15920364)
%ExtUIXPMenuColorRightGlobal LONG  (12560039)
%ExtUIXPMenuColorSelectionBarLeftGlobal LONG  (15920364)
%ExtUIXPMenuColorSelectionBarRightGlobal LONG  (15920364)
%ExtUIXPMenuSelVertical LONG  (1)
%ExtUIXPMenuColorSelectionBorderGlobal LONG  (15920364)
%ExtUIXPMenuColorHotLeftGlobal LONG  (15920364)
%ExtUIXPMenuColorHotRightGlobal LONG  (15920364)
%ExtUIXPMenuColorSelectedLeftGlobal LONG  (15920364)
%ExtUIXPMenuColorSelectedRightGlobal LONG  (15920364)
%ExtUIXPMenuColorNormalBarLeftGlobal LONG  (15920364)
%ExtUIXPMenuColorNormalBarRightGlobal LONG  (15920364)
%ExtUIXPMenuColorItemBackgroundGlobal LONG  (-2147483644)
%ExtUIXPMenuColorNormalText LONG  (0)
%ExtUIXPMenuColorSelectedText LONG  (0)
%ExtUIXPMenuColorHotText LONG  (0)
%ExtUIXPMenuFlat LONG  (1)
%ExtUIXPMenuShowImageBar LONG  (0)
%ExtUIXPMenuSeparator3D LONG  (1)
%ExtUIXPMenuSeparatorFull LONG  (0)
%ExtUIXPMenuVerticalLine LONG  (1)
%ExtUIMDITabGlobal DEFAULT  ('DISABLE')
%ExtUIMDITabStyleGlobal DEFAULT  ('Default')
%ExtUITabStyleGlobal DEFAULT  ('Default')
%WindowEnableEnhanceFocus LONG  (0)
%SelectedText LONG  (1)
%SelectedRadio LONG  (1)
%SelectedSpin LONG  (1)
%SelectedCheck LONG  (1)
%SelectedDropList LONG  (1)
%SelectedList LONG  (1)
%SelectedDisplayChangeColor LONG  (1)
%SelectedColor LONG  (65535)
%SelectedStyle LONG  (1)
%SelectedRequired LONG  (0)
%SelectedRequiredColor LONG  (65535)
%SelectedDisplayBox LONG  (1)
%SelectedDisplayBoxFillColor LONG  (65535)
%SelectedDisplayBoxBorderColor LONG  (0)
%SelectedDisplayBoxBorderSize DEFAULT  ('2')
%SelectedRequiredBox LONG  (0)
%SelectedRequiredDisplayBoxFillColor LONG  (255)
%SelectedRequiredDisplayBoxBorderColor LONG  (0)
%SelectedCaret LONG  (1)
%SelectedCaretColor LONG  (8421504)
%SelectedCaretCharacter DEFAULT  ('<187>')
%SelectedCaretCharacterSeparation DEFAULT  ('8')
%ExcludeSelectedDropList LONG  (0)
%GlobalUseEnterInsteadTab LONG  (0)
%GlobalUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalUseEnterInsteadTabEnable DEFAULT  ('Enable')
%GlobalUseEnterInsteadTabEnableValue DEFAULT  ('True')
%GlobalInterLine DEFAULT  ('0')
%GlobalEnableAutoSizeColumn LONG  (0)
%GlobalEnableListFormatManager LONG  (0)
%GlobalUserFieldListFormatManager DEFAULT  ('1')
%TableOrigin DEFAULT  ('Application')
%FileEquate DEFAULT  ('LFM_CFile')
%ConfigFilePRE DEFAULT  ('CFG')
%ConfigFileOEM LONG  (0)
%ConfigFileTHREAD LONG  (1)
%ConfigFileENCRYPT LONG  (0)
%ConfigFilePASSWORD DEFAULT  ('')
%FormatNameSize DEFAULT  ('30')
%FormatBufferSize DEFAULT  ('5120')
%VariableBufferSize DEFAULT  ('2048')
%ConfigFilePath DEFAULT  ('')
%UseConfigFileName DEFAULT  ('Default')
%ConfigFileNAME DEFAULT  ('Formats.FDB')
%ColonCounter DEFAULT  ('')
%WrongSymbol DEFAULT  ('')
%DictionaryTableOrigin FILE  ()
%GlobalLFMSortOrderMenuText DEFAULT  ('SortOrder')
%GlobalEnableRebase LONG  (0)
%RBDMethod DEFAULT  ('Specify manually')
%RBDImageBase DEFAULT  ('10000000')
%DefaultGenerate LONG  (0)
%DefaultRILogout LONG  (1)
%LockRecoverTime DEFAULT  ('10')
%DefaultThreaded DEFAULT  ('Use File Setting')
%DefaultCreate DEFAULT  ('Use File Setting')
%DefaultExternal DEFAULT  ('None External')
%DefaultLocalExternal LONG  (0)
%DefaultExternalSource DEFAULT  ('')
%DefaultExternalAPP LONG  (0)
%DefaultExport LONG  (0)
%DefaultOpenMode DEFAULT  ('Share')
%DefaultUserAccess DEFAULT  ('Read/Write')
%DefaultOtherAccess DEFAULT  ('Deny None')
%DefaultLazyOpen LONG  (1)
%GeneratePropDataPath LONG  (0)
%PropDataPathLocation DEFAULT  ('CSIDLLIKEINI')
%DataPathCSIDLDirectory DEFAULT  ('SV:CSIDL_PERSONAL')
%DataPathCSIDLCompanyDir DEFAULT  ('')
%DataPathCSIDLProductDir DEFAULT  ('')
%DataPathCSIDLCreate LONG  (0)
%DataPathOtherDirectory DEFAULT  ('')
%DataPathOtherDirectoryCreate LONG  (0)
%OverrideGenerate DEPEND %File LONG TIMES 0

%OverrideRILogout DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('YES')
WHEN  ('ErrorStatusManager') ('YES')
WHEN  ('FuzzyMatcher') ('YES')
WHEN  ('INIManager') ('YES')
WHEN  ('Translator') ('YES')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 0

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 5
WHEN  ('ErrorManager') (1)
WHEN  ('ErrorStatusManager') (1)
WHEN  ('FuzzyMatcher') (1)
WHEN  ('INIManager') (1)
WHEN  ('Translator') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 5
WHEN  ('ErrorManager') (1)
WHEN  ('ErrorStatusManager') (1)
WHEN  ('FuzzyMatcher') (1)
WHEN  ('INIManager') (1)
WHEN  ('Translator') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('')
WHEN  ('ErrorStatusManager') ('')
WHEN  ('FuzzyMatcher') ('')
WHEN  ('INIManager') ('')
WHEN  ('Translator') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 5
WHEN  ('ErrorManager') (0)
WHEN  ('ErrorStatusManager') (0)
WHEN  ('FuzzyMatcher') (0)
WHEN  ('INIManager') (0)
WHEN  ('Translator') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('FuzzyMatcher')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('FuzzyMatcher')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%OverrideThreaded DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideCreate DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideExternal DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideLocalExternal DEPEND %File LONG TIMES 0

%OverrideExternalSource DEPEND %File DEFAULT TIMES 0

%OverrideExternalAPP DEPEND %File LONG TIMES 0

%OverrideExport DEPEND %File LONG TIMES 0

%FileDeclarationMode DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use User Options')

%FileDeclarationType DEPEND %File LONG TIMES 1
WHEN  ('') (0)

%FileDeclarationThread DEPEND %File LONG TIMES 1
WHEN  ('') (0)

%FileDeclarationBindable DEPEND %File LONG TIMES 1
WHEN  ('') (1)

%FileDeclarationName DEPEND %File DEFAULT TIMES 0

%FileDeclarationOver DEPEND %File DEFAULT TIMES 0

%OverrideOpenMode DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideUserAccess DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideOtherAccess DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideLazyOpen DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%StandardExternalModule DEPEND %Module LONG TIMES 2
WHEN  ('') (1)
WHEN  ('water.clw') (1)

%NoGenerateGlobals LONG  (0)
%WindowManagerType DEFAULT  ('WindowManager')
%ResetOnGainFocus LONG  (0)
%AutoToolbar LONG  (1)
%AutoRefresh LONG  (1)
%ImageClass DEFAULT  ('ImageManager')
%ErrorStatusManagerType DEFAULT  ('ErrorStatusClass')
%ErrorManagerType DEFAULT  ('ErrorClass')
%DefaultErrorCategory DEFAULT  ('ABC')
%AllowSelectCopy LONG  (0)
%StoreErrorHistory LONG  (0)
%LimitStoredHistory LONG  (0)
%ErrorHistoryThreshold DEFAULT  ('300')
%HistoryViewTrigger DEFAULT  ('Level:Fatal')
%PopupClass DEFAULT  ('PopupClass')
%SelectFileClass DEFAULT  ('SelectFileClass')
%ResizerType DEFAULT  ('WindowResizeClass')
%ResizerDeFaultFindParents LONG  (1)
%ResizerDefaultOptimizeMoves LONG  (1)
%ResizerDefaultOptimizeRedraws LONG  (1)
%INIClass DEFAULT  ('INIClass')
%RunTimeTranslatorType DEFAULT  ('TranslatorClass')
%ExtractionFilename DEFAULT  ('')
%TranslationGroups MULTI LONG  ()
%TranslationFile DEPEND %TranslationGroups DEFAULT TIMES 0

%TranslationGroup DEPEND %TranslationGroups DEFAULT TIMES 0

%CalendarManagerType DEFAULT  ('CalendarClass')
%GlobalChangeColor LONG  (0)
%GlobalColorSunday LONG  (255)
%GlobalColorSaturday LONG  (255)
%GlobalColorHoliday LONG  (32768)
%GlobalColorOther LONG  (0)
%GlobalSelectOnClose DEFAULT  ('Select')
%GlobalUseABCClasess LONG  (1)
%FileManagerType DEFAULT  ('FileManager')
%ViewManagerType DEFAULT  ('ViewManager')
%RelationManagerType DEFAULT  ('RelationManager')
%BrowserType DEFAULT  ('BrowseClass')
%ActiveInvisible LONG  (0)
%AllowUnfilled LONG  (0)
%RetainRow LONG  (1)
%FileDropManagerType DEFAULT  ('FileDropClass')
%FileDropComboManagerType DEFAULT  ('FileDropComboClass')
%FormVCRManagerType DEFAULT  ('FormVCRClass')
%BrowseEIPManagerType DEFAULT  ('BrowseEIPManager')
%EditInPlaceInterface DEFAULT  ('Detailed')
%EditInPlaceType DEFAULT  ('EditEntryClass')
%EditInPlaceEntryType DEFAULT  ('EditEntryClass')
%EditInPlaceTextType DEFAULT  ('EditTextClass')
%EditInPlaceCheckType DEFAULT  ('EditCheckClass')
%EditInPlaceSpinType DEFAULT  ('EditSpinClass')
%EditInPlaceDropListType DEFAULT  ('EditDropListClass')
%EditInPlaceDropComboType DEFAULT  ('EditDropComboClass')
%EditInPlaceColorType DEFAULT  ('EditColorClass')
%EditInPlaceFileType DEFAULT  ('EditFileClass')
%EditInPlaceFontType DEFAULT  ('EditFontClass')
%EditInPlaceMultiSelectType DEFAULT  ('EditMultiSelectClass')
%EditInPlaceCalendarType DEFAULT  ('EditCalendarClass')
%EditInPlaceLookupType DEFAULT  ('EditLookupClass')
%EditInPlaceOtherType DEFAULT  ('EditEntryClass')
%QBEFormType DEFAULT  ('QueryFormClass')
%QBEFormVisualType DEFAULT  ('QueryFormVisual')
%QBEListType DEFAULT  ('QueryListClass')
%QBEListVisualType DEFAULT  ('QueryListVisual')
%StepManagerType DEFAULT  ('StepClass')
%StepManagerLongType DEFAULT  ('StepLongClass')
%StepManagerRealType DEFAULT  ('StepRealClass')
%StepManagerStringType DEFAULT  ('StepStringClass')
%StepManagerCustomType DEFAULT  ('StepCustomClass')
%StepLocatorType DEFAULT  ('StepLocatorClass')
%EntryLocatorType DEFAULT  ('EntryLocatorClass')
%IncrementalLocatorType DEFAULT  ('IncrementalLocatorClass')
%FilteredLocatorType DEFAULT  ('FilterLocatorClass')
%FuzzyMatcherClass DEFAULT  ('FuzzyClass')
%GridClass DEFAULT  ('GridClass')
%SidebarClass DEFAULT  ('SidebarClass')
%ProcessType DEFAULT  ('ProcessClass')
%PrintPreviewType DEFAULT  ('PrintPreviewClass')
%ReportManagerType DEFAULT  ('ReportManager')
%ReportTargetSelectorManagerType DEFAULT  ('ReportTargetSelectorClass')
%BreakManagerType DEFAULT  ('BreakManagerClass')
%AsciiViewerClass DEFAULT  ('AsciiViewerClass')
%AsciiSearchClass DEFAULT  ('AsciiSearchClass')
%AsciiPrintClass DEFAULT  ('AsciiPrintClass')
%AsciiFileManagerType DEFAULT  ('AsciiFileClass')
%ToolbarClass DEFAULT  ('ToolbarClass')
%ToolbarListBoxType DEFAULT  ('ToolbarListboxClass')
%ToolbarRelTreeType DEFAULT  ('ToolbarReltreeClass')
%ToolbarUpdateClassType DEFAULT  ('ToolbarUpdateClass')
%ToolbarFormVCRType DEFAULT  ('ToolbarFormVCRClass')
%OverrideAbcSettings LONG  (0)
%AbcSourceLocation DEFAULT  ('LINK')
%AbcLibraryName DEFAULT  ('')
%AppTemplateFamily DEFAULT  ('CLARION')
%CWTemplateVersion DEFAULT  ('v8.0')
%ABCVersion DEFAULT  ('7200')
%INIActive LONG  (0)
%GlobalReportPreviewMode DEFAULT  ('Procedure')
%GlobalReportPreview DEFAULT  ('ReportPreview')
%GlobalBrowseActiveInvisible LONG  (1)
%DefaultCloseFile DEFAULT  ('Close the File')
%WarnOnLogoutError LONG  (1)
%TriggersSupportEnableGlobal LONG  (0)
%TriggersManagerType DEFAULT  ('TriggerManager')
%OverrideCloseFile DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%CWBrowseEIPManagerType DEFAULT  ('CWEIPManager')
[ADDITION]
NAME xFiles ActivatexFiles
[INSTANCE]
INSTANCE 1
[PROMPTS]
%NoGloxFiles LONG  (0)
%XFGloRemovePrefix LONG  (1)
%XFGloReplaceColons LONG  (1)
%XFGloEncoding DEFAULT  ('Don''t Set')
%XFGloLoggingOn DEFAULT  ('100')
%XFGloHeader DEFAULT  ('')
%XFGloFooter DEFAULT  ('')
%XFGloDoMemos LONG  (0)
%XFGloDoBlobs LONG  (0)
%XFGloStringsCDATA LONG  (0)
%XFGloMemosCDATA LONG  (1)
%XFGloBlobsCDATA LONG  (1)
%XFGloFreeQueuesBeforeLoading LONG  (1)
%XFGloFreeGroupsBeforeLoading LONG  (1)
%XFGloFreeFilesBeforeLoading LONG  (0)
%xFGloUpdateFileOnLoad LONG  (0)
%MultiDLL LONG  (0)
%RootDLL LONG  (0)
%dClasses8Bx MULTI LONG  (1, 2, 3, 4, 5, 6, 7, 8, 9)
%dClasses8B DEPEND %dClasses8Bx DEFAULT TIMES 9
WHEN  (1) ('XFILEBASE')
WHEN  (2) ('XFILELINKDLL')
WHEN  (3) ('XFILEBINARY')
WHEN  (4) ('XFILEXML')
WHEN  (5) ('XFILEJSON')
WHEN  (6) ('XFILESETTINGS')
WHEN  (7) ('XFILEFASTTIMER')
WHEN  (8) ('XFILEEXPLODE')
WHEN  (9) ('XFILEBASECOMPRESS')

%dBaseClass DEPEND %dClasses8Bx DEFAULT TIMES 9
WHEN  (1) ('')
WHEN  (2) ('xFileBase')
WHEN  (3) ('xFileBase')
WHEN  (4) ('xFileBinary')
WHEN  (5) ('xFileXML')
WHEN  (6) ('xFileXML')
WHEN  (7) ('xFileBase')
WHEN  (8) ('xFileBase')
WHEN  (9) ('xFileBinary')

%dClassINCFile DEPEND %dClasses8Bx DEFAULT TIMES 9
WHEN  (1) ('XFILES.INC')
WHEN  (2) ('XFILES.INC')
WHEN  (3) ('XFILES.INC')
WHEN  (4) ('XFILES.INC')
WHEN  (5) ('XFILES.INC')
WHEN  (6) ('XFILES.INC')
WHEN  (7) ('XFILES.INC')
WHEN  (8) ('XFILES.INC')
WHEN  (9) ('XFILES.INC')

%dMethods8Cx DEPEND %dClasses8Bx MULTI LONG TIMES 8
WHEN  (1) (1, 2, 3, 4, 5)
WHEN  (2) (1, 2, 3, 4)
WHEN  (3) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
WHEN  (4) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, |
  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, |
  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, |
  61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, |
  81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, |
  101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112)
WHEN  (5) (1, 2, 3, 4, 5, 6, 7)
WHEN  (6) (1, 2, 3, 4, 5, 6)
WHEN  (7) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
WHEN  (8) (1, 2, 3, 4, 5, 6)

%dMethods8C DEPEND %dMethods8Cx DEFAULT TIMES 8
WHEN  (1)TIMES 5
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Destruct {15}PROCEDURE')
WHEN  (3) ('_Wait {18}PROCEDURE (long p_Count=-200) ,VIRTUAL')
WHEN  (4) ('_Release {15}PROCEDURE (long p_Count=-201) ,VIRTUAL')
WHEN  (5) ('Log {20}PROCEDURE (string p_Function, string p_Message,long pForce=0) ,VIRTUAL')
WHEN  (2)TIMES 4
WHEN  (1) ('LinkDLLFunction        PROCEDURE (string p_DLLName,string p_FunctionName,*long p_fpFunction),long ,VIRTUAL')
WHEN  (2) ('Construct {14}PROCEDURE')
WHEN  (3) ('Destruct {15}PROCEDURE')
WHEN  (4) ('Init {19}PROCEDURE () ,VIRTUAL')
WHEN  (3)TIMES 16
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Destruct {15}PROCEDURE')
WHEN  (3) ('Init {19}PROCEDURE (string p_FileName) ,VIRTUAL')
WHEN  (4) ('Load {19}PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (5) ('Load {19}PROCEDURE (string p_FileName),long,proc ,VIRTUAL')
WHEN  (6) ('Save {19}PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (7) ('Save {19}PROCEDURE (string p_FileName),long,proc ,VIRTUAL')
WHEN  (8) ('SearchAndReplace       PROCEDURE (string p_Find, string p_Replace),long,proc ,VIRTUAL')
WHEN  (9) ('CleanFileName {10}PROCEDURE (string p_Filename,Long p_flag=0),string ,VIRTUAL')
WHEN  (10) ('_Free {18}PROCEDURE () ,VIRTUAL')
WHEN  (11) ('_Close {17}PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (12) ('_ZipInit {15}PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (13) ('_ZipBinDataToZip       PROCEDURE (long p_DontCloseNow=0, <<string pXMLFileName>),long,proc ,VIRTUAL')
WHEN  (14) ('_UnZipToBinData        PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (15) ('_ZipBinDataCRC         PROCEDURE (),long ,VIRTUAL')
WHEN  (16) ('SaveBinButDontClose    PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (4)TIMES 112
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Constructor {12}PROCEDURE () ,VIRTUAL')
WHEN  (3) ('Destruct {15}PROCEDURE')
WHEN  (4) ('Init {19}PROCEDURE (*Group p_Group, string p_FileName), virtual')
WHEN  (5) ('Init {19}PROCEDURE (*Queue p_Queue, string p_FileName), virtual')
WHEN  (6) ('Init {19}PROCEDURE (*Queue p_Queue, string p_FileName, *Queue p_TempQueue), virtual')
WHEN  (7) ('Load {19}PROCEDURE (), long, proc, virtual')
WHEN  (8) ('Load {19}PROCEDURE (*Group p_Group, string p_FileName), long, proc, virtual')
WHEN  (9) ('Load {19}PROCEDURE (*Group p_Group, string p_FileName,string p_FileBoundary,string p_RecordBoundary), long, proc, virtual')
WHEN  (10) ('Load {19}PROCEDURE (*Group p_Group, *string p_String, long p_Length), long, proc, virtual  ')
WHEN  (11) ('Load {19}PROCEDURE (*Group p_Group, *string p_String, long p_Length,string p_FileBoundary,string p_RecordBoundary), long, proc, virtual  ')
WHEN  (12) ('Load {19}PROCEDURE (*Queue p_Queue, string p_FileName), long, proc ,VIRTUAL')
WHEN  (13) ('Load {19}PROCEDURE (*Queue p_Queue, string p_FileName,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (14) ('Load {19}PROCEDURE (*Queue p_Queue, *string p_String, long p_Length), long, proc, virtual  ')
WHEN  (15) ('Load {19}PROCEDURE (*Queue p_Queue, *string p_String, long p_Length,string p_FileBoundary,string p_RecordBoundary), long, proc, virtual  ')
WHEN  (16) ('Load {19}PROCEDURE (*File p_File, string p_FileName), long, proc, virtual')
WHEN  (17) ('Load {19}PROCEDURE (*File p_File, string p_FileName,string p_FileBoundary, string p_RecordBoundary), long, proc, virtual')
WHEN  (18) ('Load {19}PROCEDURE (*File p_File, *string p_String, long p_Length), long, proc, virtual')
WHEN  (19) ('Load {19}PROCEDURE (*File p_File, *string p_String, long p_Length, string p_FileBoundary, string p_RecordBoundary), long, proc, virtual')
WHEN  (20) ('Save {19}PROCEDURE (),long,proc ,virtual')
WHEN  (21) ('Save {19}PROCEDURE (*Group p_Group,string p_FileName),long,proc ,virtual')
WHEN  (22) ('Save {19}PROCEDURE (*Group p_Group),long,proc ,VIRTUAL')
WHEN  (23) ('Save {19}PROCEDURE (*Group p_Group,string p_FileName,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (24) ('Save {19}PROCEDURE (*Group p_Group,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (25) ('Save {19}PROCEDURE (*Queue p_Queue,string p_FileName),long,proc ,virtual')
WHEN  (26) ('Save {19}PROCEDURE (*Queue p_Queue),long,proc ,VIRTUAL')
WHEN  (27) ('Save {19}PROCEDURE (*Queue p_Queue,string p_FileName,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (28) ('Save {19}PROCEDURE (*Queue p_Queue,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (29) ('Save {19}PROCEDURE (*View p_View,string p_FileName),long,proc ,virtual')
WHEN  (30) ('Save {19}PROCEDURE (*View p_View, string p_FileName, string p_FileBoundary, string p_RecordBoundary), long, proc, virtual')
WHEN  (31) ('Save {19}PROCEDURE (*View p_View), long, proc, VIRTUAL')
WHEN  (32) ('Save {19}PROCEDURE (*View p_View, string p_FileBoundary, string p_RecordBoundary), long, proc, virtual')
WHEN  (33) ('Save {19}PROCEDURE (*File p_File, string p_FileName), long,proc ,virtual')
WHEN  (34) ('Save {19}PROCEDURE (*File p_File, string p_FileName,string p_FileBoundary,string p_RecordBoundary), long, proc, virtual')
WHEN  (35) ('Save {19}PROCEDURE (*File p_File), long, proc, VIRTUAL')
WHEN  (36) ('Save {19}PROCEDURE (*File p_File, string p_FileBoundary, string p_RecordBoundary),long, proc, virtual')
WHEN  (37) ('Save {19}PROCEDURE (*Queue p_Queue,xFileXML pXml,string p_FileBoundary, string p_RecordBoundary),long, proc, virtual')
WHEN  (38) ('Save {19}PROCEDURE (*View p_View,xFileXML pXml,string p_FileBoundary, string p_RecordBoundary),long, proc, virtual')
WHEN  (39) ('Save {19}PROCEDURE (*File p_File,xFileXML pXml,string p_FileBoundary, string p_RecordBoundary),long, proc, virtual')
WHEN  (40) ('Save {19}PROCEDURE (*Group p_Group,xFileXML pXml,string p_FileBoundary, string p_RecordBoundary),long, proc, virtual')
WHEN  (41) ('SaveOneField {11}Procedure (Long p_field,Long pState),Virtual')
WHEN  (42) ('Copy {19}Procedure (*Queue Q, *Queue p_Queue, byte p_Direction=0),long, proc, VIRTUAL')
WHEN  (43) ('Copy {19}Procedure (*File F, *Queue p_Queue, byte p_Direction=0),long, proc, VIRTUAL')
WHEN  (44) ('Copy {19}Procedure (*Group G, *Group p_Queue, byte p_Direction=0),long, proc, VIRTUAL')
WHEN  (45) ('_Copy {18}Procedure (*Queue p_Queue, byte p_Direction=0),long, proc, VIRTUAL')
WHEN  (46) ('_Copy {18}Procedure (*Group p_Group, byte p_Direction=0),long, proc, VIRTUAL')
WHEN  (47) ('GetValue {15}PROCEDURE (string p_Field, long p_dim = 0),any ,VIRTUAL')
WHEN  (48) ('SetValue {15}PROCEDURE (string p_Field, string p_Value, long p_dim = 0),long,proc ,VIRTUAL')
WHEN  (49) ('AddRecord {14}PROCEDURE (<<any p_F1>,<<any p_F2>,<<any p_F3>,<<any p_F4>,<<any p_F5>,<<any p_F6>,<<any p_F7>,<<any p_F8>,<<any p_F9>,<<any p_F10>,<<any p_F11>,<<any p_F12>,<<any p_F13>,<<any p_F14>,<<any p_F15>,<<any p_F16>,<<any p_F17>,<<any p_F18>,<<any p_F19>,<<any p_F20>),long,proc ,VIRTUAL')
WHEN  (50) ('FastDelete {13}PROCEDURE (long p_KeepStart, long p_KeepEnd),long,proc ,VIRTUAL')
WHEN  (51) ('RecordCount {12}PROCEDURE (),long ,VIRTUAL')
WHEN  (52) ('RemoveDuplicatesAfterSort PROCEDURE (long p_FieldCount),long,proc ,VIRTUAL')
WHEN  (53) ('TruncateIfNeeded       PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (54) ('MakeAttributesForRecord  Procedure(Long NumberOfAttributeFields),Long,VIRTUAL')
WHEN  (55) ('SaveCurrentFieldToXML  PROCEDURE  (Long p_x,Long p_DimCounter),VIRTUAL')
WHEN  (56) ('SaveCurrentFieldToXML  PROCEDURE  (Long p_x,Long p_DimCounter,String p_name),VIRTUAL')
WHEN  (57) ('FormatCurrentField     PROCEDURE  (String p_format),VIRTUAL')
WHEN  (58) ('StartRecord {12}PROCEDURE (Long RecordBoundaryLen,Long RecordBoundaryLenAttr),VIRTUAL')
WHEN  (59) ('EndRecord {14}PROCEDURE (Long p_Len),VIRTUAL')
WHEN  (60) ('AddString {14}Procedure (String pString)')
WHEN  (61) ('ExtractNames {11}PROCEDURE (),VIRTUAL')
WHEN  (62) ('SetGroupLengths        Procedure (),VIRTUAL')
WHEN  (63) ('ExtractValue {11}PROCEDURE (String p_attr,String p_text),String ,VIRTUAL')
WHEN  (64) ('_WriteCurrentField     PROCEDURE (Long p_x) ,VIRTUAL')
WHEN  (65) ('_WriteStartTag         PROCEDURE (Long p_x,Long p_DimCounter,Long p_CRLF=0) ,VIRTUAL')
WHEN  (66) ('_WriteEndTag {11}PROCEDURE (Long p_x,Long p_DimCounter,Long p_Indent=0) ,VIRTUAL')
WHEN  (67) ('_WriteAttribute        PROCEDURE (Long p_x),VIRTUAL')
WHEN  (68) ('_AddAttribute {10}Procedure (Long p_x, *String p_string,*Long p_Len, Long p_NewLength, Long p_cs), Virtual')
WHEN  (69) ('_CountFieldsInGroup    PROCEDURE (*Group p_g),Long ,VIRTUAL')
WHEN  (70) ('_CountFields {11}PROCEDURE () ,VIRTUAL')
WHEN  (71) ('_Check {17}PROCEDURE () ,VIRTUAL')
WHEN  (72) ('_SetIndentSize         PROCEDURE (byte p_Indent) ,VIRTUAL')
WHEN  (73) ('_ReplaceColonsInString PROCEDURE (*string inData) ,VIRTUAL')
WHEN  (74) ('SaveBinButDontClose    PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (75) ('RemoveComments         PROCEDURE (),VIRTUAL')
WHEN  (76) ('_RemovePrefix {10}PROCEDURE (*String p_name),VIRTUAL')
WHEN  (77) ('_RemovePrefix {10}PROCEDURE (*pString p_name),VIRTUAL')
WHEN  (78) ('_IsBoundary {12}PROCEDURE (Long px, *pString pTag),Long ,VIRTUAL')
WHEN  (79) ('_Resize {16}PROCEDURE (Long pNewSize),Virtual')
WHEN  (80) ('Init {19}PROCEDURE (*File p_File, string p_FileName) ,VIRTUAL')
WHEN  (81) ('Init {19}PROCEDURE (*View p_View, string p_FileName) ,VIRTUAL')
WHEN  (82) ('CreateFooter {11}PROCEDURE () ,VIRTUAL')
WHEN  (83) ('CreateHeader {11}PROCEDURE () ,VIRTUAL')
WHEN  (84) ('SetFile {16}PROCEDURE () ,VIRTUAL')
WHEN  (85) ('SetView {16}PROCEDURE () ,VIRTUAL')
WHEN  (86) ('SaveTweakSettings      PROCEDURE () ,VIRTUAL')
WHEN  (87) ('LoadTweakSettings      PROCEDURE () ,VIRTUAL')
WHEN  (88) ('RemovePrefixInString   PROCEDURE (*string p_String) ,VIRTUAL')
WHEN  (89) ('FreeFileData {11}PROCEDURE () ,VIRTUAL')
WHEN  (90) ('FreeQueueData {10}PROCEDURE () ,VIRTUAL')
WHEN  (91) ('FreeGroupData {10}PROCEDURE () ,VIRTUAL')
WHEN  (92) ('InsertFileRecord       PROCEDURE () ,VIRTUAL')
WHEN  (93) ('AddQueueRecord         PROCEDURE (Long pFirst=0) ,VIRTUAL')
WHEN  (94) ('UpdateFileRecord       PROCEDURE () ,VIRTUAL')
WHEN  (95) ('SaveBinData {12}Procedure (<<string fileName>), long, virtual')
WHEN  (96) ('LoadBinData {12}Procedure (<<string fileName>), long, virtual')
WHEN  (97) ('ValidateRecord         Procedure (), long, virtual')
WHEN  (98) ('GetFieldNumber         Procedure (string p_Field,Long p_instance=1),Long, virtual')
WHEN  (99) ('SaveTweakFieldSettings Procedure (), virtual')
WHEN  (100) ('AssignField {12}Procedure (Long DataStartPos,Long DataEndPos),Long, virtual ')
WHEN  (101) ('AssignField {12}Procedure (String pString), virtual {25}')
WHEN  (102) ('Decode {17}Procedure(String pStr),String,Virtual')
WHEN  (103) ('DecodeAmpersand        Procedure(String pStr,*String dStr),Virtual')
WHEN  (104) ('SetFieldPointer        Procedure (String pTag),Long, virtual')
WHEN  (105) ('IsGroup {16}Procedure(String pTag),Long, virtual')
WHEN  (106) ('ParseAttr {14}Procedure (Long DataStartPos,Long DataEndPos), virtual')
WHEN  (107) ('ParseAttr {14}Procedure (String pAttr), virtual')
WHEN  (108) ('LoadAllOldFields       Procedure (), virtual')
WHEN  (109) ('AddOldField {12}Procedure (String p_OldFieldName, long p_PosInFile), long, virtual, proc')
WHEN  (110) ('UseCharSet {13}Procedure (Long p_Charset)')
WHEN  (111) ('SetAsAttributeA        procedure(String p_Fieldname,Long p_value=true,Long p_instance=1), virtual')
WHEN  (112) ('SetAsAttribute         procedure(String p_Fieldname,<<String p_OfName>,Long p_instance=1,Long p_OfInstance=1), Virtual')
WHEN  (5)TIMES 7
WHEN  (1) ('CreateFooter {11}PROCEDURE () ,VIRTUAL')
WHEN  (2) ('CreateHeader {11}PROCEDURE () ,VIRTUAL')
WHEN  (3) ('StartRecord {12}PROCEDURE (Long RecordBoundaryLen,Long RecordBoundaryLenAttr),VIRTUAL')
WHEN  (4) ('EndRecord {14}PROCEDURE (Long p_Len),VIRTUAL')
WHEN  (5) ('_WriteStartTag         PROCEDURE (Long p_x,Long p_DimCounter,Long p_CRLF=0) ,VIRTUAL')
WHEN  (6) ('_WriteEndTag {11}PROCEDURE (Long p_x,Long p_DimCounter,Long p_Indent=0) ,VIRTUAL')
WHEN  (7) ('_WriteCurrentField     PROCEDURE (Long p_x) ,VIRTUAL')
WHEN  (6)TIMES 6
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Destruct {15}PROCEDURE')
WHEN  (3) ('Init {19}PROCEDURE (String p_FileName) ,VIRTUAL')
WHEN  (4) ('Save {19}PROCEDURE (long p_DontCloseNow=0),long,proc ,VIRTUAL')
WHEN  (5) ('SetSetting {13}PROCEDURE (string p_Section,string p_Name,string p_Value) ,VIRTUAL')
WHEN  (6) ('GetSetting {13}PROCEDURE (string p_Section,string p_Name,string p_Default),string ,VIRTUAL')
WHEN  (7)TIMES 11
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Init {19}PROCEDURE () ,VIRTUAL')
WHEN  (3) ('StartTimer {13}PROCEDURE (long p_Index=1) ,VIRTUAL')
WHEN  (4) ('GetTimer {15}PROCEDURE (long p_Index=1),real ,VIRTUAL')
WHEN  (5) ('StopTimer {14}PROCEDURE (long p_Index=1) ,VIRTUAL')
WHEN  (6) ('GetTimer {15}PROCEDURE (long p_Index, long p_Format, long p_DPlaces=-1),string ,VIRTUAL')
WHEN  (7) ('GetFastClock {11}PROCEDURE (),real ,VIRTUAL')
WHEN  (8) ('Sleep {18}PROCEDURE (long p_MilliSeconds) ,VIRTUAL')
WHEN  (9) ('_InitClock {13}PROCEDURE (long p_ForceInit=0) ,VIRTUAL')
WHEN  (10) ('_InitFrequency         PROCEDURE () ,VIRTUAL')
WHEN  (11) ('_GetPerformanceCount   PROCEDURE (long p_lpPerformanceCount) ,VIRTUAL')
WHEN  (8)TIMES 6
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Destruct {15}PROCEDURE')
WHEN  (3) ('_LoadDLL {15}PROCEDURE (),long ,VIRTUAL')
WHEN  (4) ('ExplodeFile {12}PROCEDURE (string p_InFileName, string p_OutFileName),long,proc ,VIRTUAL')
WHEN  (5) ('ExplodeMemToBinData    PROCEDURE (*string p_Buf, long p_BufLen),long,proc ,VIRTUAL')
WHEN  (6) ('Free {19}PROCEDURE () ,VIRTUAL')

%dClassVersion DEFAULT  ('77988')
[ADDITION]
NAME NetTalk Activate_NetTalk
[INSTANCE]
INSTANCE 2
[PROMPTS]
%NoNetTalk LONG  (0)
%AddNetTalkLogDefine LONG  (1)
%ForceObjectDLLLogging LONG  (0)
%ForceObjectLogging LONG  (0)
%ForceDLLLogging LONG  (0)
%ForceErrorLogging LONG  (0)
%FourGigs LONG  (0)
%ForceClarioNetLib LONG  (0)
%ExternalRunTimeDLL LONG  (0)
%DynamicDLL LONG  (0)
%NoMode LONG  (0)
%NTSecwin4IsHere LONG  (0)
[ADDITION]
NAME StringTheory Activate_StringTheory
[INSTANCE]
INSTANCE 3
[PROMPTS]
%NoGloStringTheory LONG  (0)
%md5 LONG  (0)
%MultiDLL LONG  (0)
%RootDLL LONG  (0)
%dClasses8Bx MULTI LONG  (2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
%dClasses8B DEPEND %dClasses8Bx DEFAULT TIMES 10
WHEN  (2) ('XFILEBASE')
WHEN  (3) ('XFILELINKDLL')
WHEN  (4) ('XFILEBINARY')
WHEN  (5) ('XFILEXML')
WHEN  (6) ('XFILEJSON')
WHEN  (7) ('XFILESETTINGS')
WHEN  (8) ('XFILEFASTTIMER')
WHEN  (9) ('XFILEEXPLODE')
WHEN  (10) ('XFILEBASECOMPRESS')
WHEN  (11) ('STRINGTHEORY')

%dBaseClass DEPEND %dClasses8Bx DEFAULT TIMES 10
WHEN  (2) ('')
WHEN  (3) ('xFileBase')
WHEN  (4) ('xFileBase')
WHEN  (5) ('xFileBinary')
WHEN  (6) ('xFileXML')
WHEN  (7) ('xFileXML')
WHEN  (8) ('xFileBase')
WHEN  (9) ('xFileBase')
WHEN  (10) ('xFileBinary')
WHEN  (11) ('')

%dClassINCFile DEPEND %dClasses8Bx DEFAULT TIMES 10
WHEN  (2) ('XFILES.INC')
WHEN  (3) ('XFILES.INC')
WHEN  (4) ('XFILES.INC')
WHEN  (5) ('XFILES.INC')
WHEN  (6) ('XFILES.INC')
WHEN  (7) ('XFILES.INC')
WHEN  (8) ('XFILES.INC')
WHEN  (9) ('XFILES.INC')
WHEN  (10) ('XFILES.INC')
WHEN  (11) ('STRINGTHEORY.INC')

%dMethods8Cx DEPEND %dClasses8Bx MULTI LONG TIMES 9
WHEN  (2) (1, 2, 3, 4, 5)
WHEN  (3) (1, 2, 3, 4)
WHEN  (4) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
WHEN  (5) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, |
  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, |
  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, |
  61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, |
  81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, |
  101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112)
WHEN  (6) (1, 2, 3, 4, 5, 6, 7)
WHEN  (7) (1, 2, 3, 4, 5, 6)
WHEN  (8) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
WHEN  (9) (1, 2, 3, 4, 5, 6)
WHEN  (11) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, |
  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, |
  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, |
  61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, |
  81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, |
  101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, |
  117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, |
  133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, |
  149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, |
  165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, |
  181)

%dMethods8C DEPEND %dMethods8Cx DEFAULT TIMES 9
WHEN  (2)TIMES 5
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Destruct {15}PROCEDURE')
WHEN  (3) ('_Wait {18}PROCEDURE (long p_Count=-200) ,VIRTUAL')
WHEN  (4) ('_Release {15}PROCEDURE (long p_Count=-201) ,VIRTUAL')
WHEN  (5) ('Log {20}PROCEDURE (string p_Function, string p_Message,long pForce=0) ,VIRTUAL')
WHEN  (3)TIMES 4
WHEN  (1) ('LinkDLLFunction        PROCEDURE (string p_DLLName,string p_FunctionName,*long p_fpFunction),long ,VIRTUAL')
WHEN  (2) ('Construct {14}PROCEDURE')
WHEN  (3) ('Destruct {15}PROCEDURE')
WHEN  (4) ('Init {19}PROCEDURE () ,VIRTUAL')
WHEN  (4)TIMES 16
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Destruct {15}PROCEDURE')
WHEN  (3) ('Init {19}PROCEDURE (string p_FileName) ,VIRTUAL')
WHEN  (4) ('Load {19}PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (5) ('Load {19}PROCEDURE (string p_FileName),long,proc ,VIRTUAL')
WHEN  (6) ('Save {19}PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (7) ('Save {19}PROCEDURE (string p_FileName),long,proc ,VIRTUAL')
WHEN  (8) ('SearchAndReplace       PROCEDURE (string p_Find, string p_Replace),long,proc ,VIRTUAL')
WHEN  (9) ('CleanFileName {10}PROCEDURE (string p_Filename,Long p_flag=0),string ,VIRTUAL')
WHEN  (10) ('_Free {18}PROCEDURE () ,VIRTUAL')
WHEN  (11) ('_Close {17}PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (12) ('_ZipInit {15}PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (13) ('_ZipBinDataToZip       PROCEDURE (long p_DontCloseNow=0, <<string pXMLFileName>),long,proc ,VIRTUAL')
WHEN  (14) ('_UnZipToBinData        PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (15) ('_ZipBinDataCRC         PROCEDURE (),long ,VIRTUAL')
WHEN  (16) ('SaveBinButDontClose    PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (5)TIMES 112
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Constructor {12}PROCEDURE () ,VIRTUAL')
WHEN  (3) ('Destruct {15}PROCEDURE')
WHEN  (4) ('Init {19}PROCEDURE (*Group p_Group, string p_FileName), virtual')
WHEN  (5) ('Init {19}PROCEDURE (*Queue p_Queue, string p_FileName), virtual')
WHEN  (6) ('Init {19}PROCEDURE (*Queue p_Queue, string p_FileName, *Queue p_TempQueue), virtual')
WHEN  (7) ('Load {19}PROCEDURE (), long, proc, virtual')
WHEN  (8) ('Load {19}PROCEDURE (*Group p_Group, string p_FileName), long, proc, virtual')
WHEN  (9) ('Load {19}PROCEDURE (*Group p_Group, string p_FileName,string p_FileBoundary,string p_RecordBoundary), long, proc, virtual')
WHEN  (10) ('Load {19}PROCEDURE (*Group p_Group, *string p_String, long p_Length), long, proc, virtual  ')
WHEN  (11) ('Load {19}PROCEDURE (*Group p_Group, *string p_String, long p_Length,string p_FileBoundary,string p_RecordBoundary), long, proc, virtual  ')
WHEN  (12) ('Load {19}PROCEDURE (*Queue p_Queue, string p_FileName), long, proc ,VIRTUAL')
WHEN  (13) ('Load {19}PROCEDURE (*Queue p_Queue, string p_FileName,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (14) ('Load {19}PROCEDURE (*Queue p_Queue, *string p_String, long p_Length), long, proc, virtual  ')
WHEN  (15) ('Load {19}PROCEDURE (*Queue p_Queue, *string p_String, long p_Length,string p_FileBoundary,string p_RecordBoundary), long, proc, virtual  ')
WHEN  (16) ('Load {19}PROCEDURE (*File p_File, string p_FileName), long, proc, virtual')
WHEN  (17) ('Load {19}PROCEDURE (*File p_File, string p_FileName,string p_FileBoundary, string p_RecordBoundary), long, proc, virtual')
WHEN  (18) ('Load {19}PROCEDURE (*File p_File, *string p_String, long p_Length), long, proc, virtual')
WHEN  (19) ('Load {19}PROCEDURE (*File p_File, *string p_String, long p_Length, string p_FileBoundary, string p_RecordBoundary), long, proc, virtual')
WHEN  (20) ('Save {19}PROCEDURE (),long,proc ,virtual')
WHEN  (21) ('Save {19}PROCEDURE (*Group p_Group,string p_FileName),long,proc ,virtual')
WHEN  (22) ('Save {19}PROCEDURE (*Group p_Group),long,proc ,VIRTUAL')
WHEN  (23) ('Save {19}PROCEDURE (*Group p_Group,string p_FileName,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (24) ('Save {19}PROCEDURE (*Group p_Group,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (25) ('Save {19}PROCEDURE (*Queue p_Queue,string p_FileName),long,proc ,virtual')
WHEN  (26) ('Save {19}PROCEDURE (*Queue p_Queue),long,proc ,VIRTUAL')
WHEN  (27) ('Save {19}PROCEDURE (*Queue p_Queue,string p_FileName,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (28) ('Save {19}PROCEDURE (*Queue p_Queue,string p_FileBoundary,string p_RecordBoundary),long,proc ,virtual')
WHEN  (29) ('Save {19}PROCEDURE (*View p_View,string p_FileName),long,proc ,virtual')
WHEN  (30) ('Save {19}PROCEDURE (*View p_View, string p_FileName, string p_FileBoundary, string p_RecordBoundary), long, proc, virtual')
WHEN  (31) ('Save {19}PROCEDURE (*View p_View), long, proc, VIRTUAL')
WHEN  (32) ('Save {19}PROCEDURE (*View p_View, string p_FileBoundary, string p_RecordBoundary), long, proc, virtual')
WHEN  (33) ('Save {19}PROCEDURE (*File p_File, string p_FileName), long,proc ,virtual')
WHEN  (34) ('Save {19}PROCEDURE (*File p_File, string p_FileName,string p_FileBoundary,string p_RecordBoundary), long, proc, virtual')
WHEN  (35) ('Save {19}PROCEDURE (*File p_File), long, proc, VIRTUAL')
WHEN  (36) ('Save {19}PROCEDURE (*File p_File, string p_FileBoundary, string p_RecordBoundary),long, proc, virtual')
WHEN  (37) ('Save {19}PROCEDURE (*Queue p_Queue,xFileXML pXml,string p_FileBoundary, string p_RecordBoundary),long, proc, virtual')
WHEN  (38) ('Save {19}PROCEDURE (*View p_View,xFileXML pXml,string p_FileBoundary, string p_RecordBoundary),long, proc, virtual')
WHEN  (39) ('Save {19}PROCEDURE (*File p_File,xFileXML pXml,string p_FileBoundary, string p_RecordBoundary),long, proc, virtual')
WHEN  (40) ('Save {19}PROCEDURE (*Group p_Group,xFileXML pXml,string p_FileBoundary, string p_RecordBoundary),long, proc, virtual')
WHEN  (41) ('SaveOneField {11}Procedure (Long p_field,Long pState),Virtual')
WHEN  (42) ('Copy {19}Procedure (*Queue Q, *Queue p_Queue, byte p_Direction=0),long, proc, VIRTUAL')
WHEN  (43) ('Copy {19}Procedure (*File F, *Queue p_Queue, byte p_Direction=0),long, proc, VIRTUAL')
WHEN  (44) ('Copy {19}Procedure (*Group G, *Group p_Queue, byte p_Direction=0),long, proc, VIRTUAL')
WHEN  (45) ('_Copy {18}Procedure (*Queue p_Queue, byte p_Direction=0),long, proc, VIRTUAL')
WHEN  (46) ('_Copy {18}Procedure (*Group p_Group, byte p_Direction=0),long, proc, VIRTUAL')
WHEN  (47) ('GetValue {15}PROCEDURE (string p_Field, long p_dim = 0),any ,VIRTUAL')
WHEN  (48) ('SetValue {15}PROCEDURE (string p_Field, string p_Value, long p_dim = 0),long,proc ,VIRTUAL')
WHEN  (49) ('AddRecord {14}PROCEDURE (<<any p_F1>,<<any p_F2>,<<any p_F3>,<<any p_F4>,<<any p_F5>,<<any p_F6>,<<any p_F7>,<<any p_F8>,<<any p_F9>,<<any p_F10>,<<any p_F11>,<<any p_F12>,<<any p_F13>,<<any p_F14>,<<any p_F15>,<<any p_F16>,<<any p_F17>,<<any p_F18>,<<any p_F19>,<<any p_F20>),long,proc ,VIRTUAL')
WHEN  (50) ('FastDelete {13}PROCEDURE (long p_KeepStart, long p_KeepEnd),long,proc ,VIRTUAL')
WHEN  (51) ('RecordCount {12}PROCEDURE (),long ,VIRTUAL')
WHEN  (52) ('RemoveDuplicatesAfterSort PROCEDURE (long p_FieldCount),long,proc ,VIRTUAL')
WHEN  (53) ('TruncateIfNeeded       PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (54) ('MakeAttributesForRecord  Procedure(Long NumberOfAttributeFields),Long,VIRTUAL')
WHEN  (55) ('SaveCurrentFieldToXML  PROCEDURE  (Long p_x,Long p_DimCounter),VIRTUAL')
WHEN  (56) ('SaveCurrentFieldToXML  PROCEDURE  (Long p_x,Long p_DimCounter,String p_name),VIRTUAL')
WHEN  (57) ('FormatCurrentField     PROCEDURE  (String p_format),VIRTUAL')
WHEN  (58) ('StartRecord {12}PROCEDURE (Long RecordBoundaryLen,Long RecordBoundaryLenAttr),VIRTUAL')
WHEN  (59) ('EndRecord {14}PROCEDURE (Long p_Len),VIRTUAL')
WHEN  (60) ('AddString {14}Procedure (String pString)')
WHEN  (61) ('ExtractNames {11}PROCEDURE (),VIRTUAL')
WHEN  (62) ('SetGroupLengths        Procedure (),VIRTUAL')
WHEN  (63) ('ExtractValue {11}PROCEDURE (String p_attr,String p_text),String ,VIRTUAL')
WHEN  (64) ('_WriteCurrentField     PROCEDURE (Long p_x) ,VIRTUAL')
WHEN  (65) ('_WriteStartTag         PROCEDURE (Long p_x,Long p_DimCounter,Long p_CRLF=0) ,VIRTUAL')
WHEN  (66) ('_WriteEndTag {11}PROCEDURE (Long p_x,Long p_DimCounter,Long p_Indent=0) ,VIRTUAL')
WHEN  (67) ('_WriteAttribute        PROCEDURE (Long p_x),VIRTUAL')
WHEN  (68) ('_AddAttribute {10}Procedure (Long p_x, *String p_string,*Long p_Len, Long p_NewLength, Long p_cs), Virtual')
WHEN  (69) ('_CountFieldsInGroup    PROCEDURE (*Group p_g),Long ,VIRTUAL')
WHEN  (70) ('_CountFields {11}PROCEDURE () ,VIRTUAL')
WHEN  (71) ('_Check {17}PROCEDURE () ,VIRTUAL')
WHEN  (72) ('_SetIndentSize         PROCEDURE (byte p_Indent) ,VIRTUAL')
WHEN  (73) ('_ReplaceColonsInString PROCEDURE (*string inData) ,VIRTUAL')
WHEN  (74) ('SaveBinButDontClose    PROCEDURE (),long,proc ,VIRTUAL')
WHEN  (75) ('RemoveComments         PROCEDURE (),VIRTUAL')
WHEN  (76) ('_RemovePrefix {10}PROCEDURE (*String p_name),VIRTUAL')
WHEN  (77) ('_RemovePrefix {10}PROCEDURE (*pString p_name),VIRTUAL')
WHEN  (78) ('_IsBoundary {12}PROCEDURE (Long px, *pString pTag),Long ,VIRTUAL')
WHEN  (79) ('_Resize {16}PROCEDURE (Long pNewSize),Virtual')
WHEN  (80) ('Init {19}PROCEDURE (*File p_File, string p_FileName) ,VIRTUAL')
WHEN  (81) ('Init {19}PROCEDURE (*View p_View, string p_FileName) ,VIRTUAL')
WHEN  (82) ('CreateFooter {11}PROCEDURE () ,VIRTUAL')
WHEN  (83) ('CreateHeader {11}PROCEDURE () ,VIRTUAL')
WHEN  (84) ('SetFile {16}PROCEDURE () ,VIRTUAL')
WHEN  (85) ('SetView {16}PROCEDURE () ,VIRTUAL')
WHEN  (86) ('SaveTweakSettings      PROCEDURE () ,VIRTUAL')
WHEN  (87) ('LoadTweakSettings      PROCEDURE () ,VIRTUAL')
WHEN  (88) ('RemovePrefixInString   PROCEDURE (*string p_String) ,VIRTUAL')
WHEN  (89) ('FreeFileData {11}PROCEDURE () ,VIRTUAL')
WHEN  (90) ('FreeQueueData {10}PROCEDURE () ,VIRTUAL')
WHEN  (91) ('FreeGroupData {10}PROCEDURE () ,VIRTUAL')
WHEN  (92) ('InsertFileRecord       PROCEDURE () ,VIRTUAL')
WHEN  (93) ('AddQueueRecord         PROCEDURE (Long pFirst=0) ,VIRTUAL')
WHEN  (94) ('UpdateFileRecord       PROCEDURE () ,VIRTUAL')
WHEN  (95) ('SaveBinData {12}Procedure (<<string fileName>), long, virtual')
WHEN  (96) ('LoadBinData {12}Procedure (<<string fileName>), long, virtual')
WHEN  (97) ('ValidateRecord         Procedure (), long, virtual')
WHEN  (98) ('GetFieldNumber         Procedure (string p_Field,Long p_instance=1),Long, virtual')
WHEN  (99) ('SaveTweakFieldSettings Procedure (), virtual')
WHEN  (100) ('AssignField {12}Procedure (Long DataStartPos,Long DataEndPos),Long, virtual ')
WHEN  (101) ('AssignField {12}Procedure (String pString), virtual {25}')
WHEN  (102) ('Decode {17}Procedure(String pStr),String,Virtual')
WHEN  (103) ('DecodeAmpersand        Procedure(String pStr,*String dStr),Virtual')
WHEN  (104) ('SetFieldPointer        Procedure (String pTag),Long, virtual')
WHEN  (105) ('IsGroup {16}Procedure(String pTag),Long, virtual')
WHEN  (106) ('ParseAttr {14}Procedure (Long DataStartPos,Long DataEndPos), virtual')
WHEN  (107) ('ParseAttr {14}Procedure (String pAttr), virtual')
WHEN  (108) ('LoadAllOldFields       Procedure (), virtual')
WHEN  (109) ('AddOldField {12}Procedure (String p_OldFieldName, long p_PosInFile), long, virtual, proc')
WHEN  (110) ('UseCharSet {13}Procedure (Long p_Charset)')
WHEN  (111) ('SetAsAttributeA        procedure(String p_Fieldname,Long p_value=true,Long p_instance=1), virtual')
WHEN  (112) ('SetAsAttribute         procedure(String p_Fieldname,<<String p_OfName>,Long p_instance=1,Long p_OfInstance=1), Virtual')
WHEN  (6)TIMES 7
WHEN  (1) ('CreateFooter {11}PROCEDURE () ,VIRTUAL')
WHEN  (2) ('CreateHeader {11}PROCEDURE () ,VIRTUAL')
WHEN  (3) ('StartRecord {12}PROCEDURE (Long RecordBoundaryLen,Long RecordBoundaryLenAttr),VIRTUAL')
WHEN  (4) ('EndRecord {14}PROCEDURE (Long p_Len),VIRTUAL')
WHEN  (5) ('_WriteStartTag         PROCEDURE (Long p_x,Long p_DimCounter,Long p_CRLF=0) ,VIRTUAL')
WHEN  (6) ('_WriteEndTag {11}PROCEDURE (Long p_x,Long p_DimCounter,Long p_Indent=0) ,VIRTUAL')
WHEN  (7) ('_WriteCurrentField     PROCEDURE (Long p_x) ,VIRTUAL')
WHEN  (7)TIMES 6
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Destruct {15}PROCEDURE')
WHEN  (3) ('Init {19}PROCEDURE (String p_FileName) ,VIRTUAL')
WHEN  (4) ('Save {19}PROCEDURE (long p_DontCloseNow=0),long,proc ,VIRTUAL')
WHEN  (5) ('SetSetting {13}PROCEDURE (string p_Section,string p_Name,string p_Value) ,VIRTUAL')
WHEN  (6) ('GetSetting {13}PROCEDURE (string p_Section,string p_Name,string p_Default),string ,VIRTUAL')
WHEN  (8)TIMES 11
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Init {19}PROCEDURE () ,VIRTUAL')
WHEN  (3) ('StartTimer {13}PROCEDURE (long p_Index=1) ,VIRTUAL')
WHEN  (4) ('GetTimer {15}PROCEDURE (long p_Index=1),real ,VIRTUAL')
WHEN  (5) ('StopTimer {14}PROCEDURE (long p_Index=1) ,VIRTUAL')
WHEN  (6) ('GetTimer {15}PROCEDURE (long p_Index, long p_Format, long p_DPlaces=-1),string ,VIRTUAL')
WHEN  (7) ('GetFastClock {11}PROCEDURE (),real ,VIRTUAL')
WHEN  (8) ('Sleep {18}PROCEDURE (long p_MilliSeconds) ,VIRTUAL')
WHEN  (9) ('_InitClock {13}PROCEDURE (long p_ForceInit=0) ,VIRTUAL')
WHEN  (10) ('_InitFrequency         PROCEDURE () ,VIRTUAL')
WHEN  (11) ('_GetPerformanceCount   PROCEDURE (long p_lpPerformanceCount) ,VIRTUAL')
WHEN  (9)TIMES 6
WHEN  (1) ('Construct {14}PROCEDURE')
WHEN  (2) ('Destruct {15}PROCEDURE')
WHEN  (3) ('_LoadDLL {15}PROCEDURE (),long ,VIRTUAL')
WHEN  (4) ('ExplodeFile {12}PROCEDURE (string p_InFileName, string p_OutFileName),long,proc ,VIRTUAL')
WHEN  (5) ('ExplodeMemToBinData    PROCEDURE (*string p_Buf, long p_BufLen),long,proc ,VIRTUAL')
WHEN  (6) ('Free {19}PROCEDURE () ,VIRTUAL')
WHEN  (11)TIMES 181
WHEN  (1) ('Destruct {14}Procedure ()')
WHEN  (2) ('Construct {13}Procedure ()')
WHEN  (3) ('AppendA {15}Procedure (string newValue, long pClip = false, <<string pSep>), virtual   ')
WHEN  (4) ('AppendBinary {10}Procedure(long pValue,Long pLength=4),Virtual')
WHEN  (5) ('Append {16}Procedure (string newValue, long pClip = false, <<string pSep>), virtual   ')
WHEN  (6) ('SetValue {14}Procedure (string newValue,long pClip=false), virtual')
WHEN  (7) ('Assign {16}Procedure (*string newValue), virtual')
WHEN  (8) ('SetValue {14}Procedure (*string newValue,long pClip=false), virtual')
WHEN  (9) ('Base64Encode {10}Procedure (),Virtual')
WHEN  (10) ('Base64Encode {10}Procedure (*string pText, *long pLen), virtual')
WHEN  (11) ('Base64Decode {10}Procedure (), virtual')
WHEN  (12) ('Base64Decode {10}Procedure (*string pText, *long pLen), virtual')
WHEN  (13) ('EncodedWordDecode     Procedure(), virtual')
WHEN  (14) ('Free {18}Procedure (Long pLines=False), virtual')
WHEN  (15) ('FreeLines {13}Procedure (), virtual')
WHEN  (16) ('ClipLen {15}Procedure (), long, virtual')
WHEN  (17) ('ClipLength {12}Procedure (), long, virtual')
WHEN  (18) ('Crop {18}Procedure (ulong pStart=1, ulong pEnd=0), Virtual')
WHEN  (19) ('Instring {14}Procedure (string pSearchValue, long pStep=1, long pStart=1, long pEnd=0, long pNocase=0, long pWholeWord=0), long, virtual')
WHEN  (20) ('Count {17}Procedure (string pSearchValue, long pStep=1, long pStart=1, long pEnd=0, long pNoCase=0, bool softClip=true, long pOverlap=true), long, virtual')
WHEN  (21) ('ErrorTrap {13}Procedure (string methodName, string errorMessage), virtual')
WHEN  (22) ('ExtensionOnly         Procedure (<<string fPath>),String, virtual')
WHEN  (23) ('FormatMessage         Function (long err), string, virtual')
WHEN  (24) ('GetValue {14}Procedure (), string, virtual')
WHEN  (25) ('GetValue {14}Procedure (long maxLen), string, virtual')
WHEN  (26) ('GetVal {16}Procedure (), string, virtual')
WHEN  (27) ('GetLine {15}Procedure (long pLineNumber), string, virtual')
WHEN  (28) ('InLine {16}Procedure (string pSearchValue, long pStep=1, long pStart=1, long pEnd=0, long pNocase=0, long pWholeLine=0),Long,virtual')
WHEN  (29) ('SetLine {15}Procedure (long pLineNumber,String pValue),virtual')
WHEN  (30) ('AddLine {15}Procedure (long pLineNumber,String pValue),virtual')
WHEN  (31) ('DeleteLine {12}Procedure(long pLineNumber), long, proc, virtual')
WHEN  (32) ('RemoveLines {11}Procedure(<<String pAlphabet>), long, proc, virtual')
WHEN  (33) ('Join {18}Procedure (string pBoundary,<<string pQuotestart>,<<string pQuoteEnd>),virtual')
WHEN  (34) ('Length {16}Procedure (), long, virtual {16}')
WHEN  (35) ('LengthA {15}Procedure (), long, virtual')
WHEN  (36) ('Len {19}Procedure (), long, virtual')
WHEN  (37) ('MD5 {19}Procedure (), string, virtual')
WHEN  (38) ('Prepend {15}Procedure (string newValue, long pClip = false, <<string pSep>), virtual')
WHEN  (39) ('Random {16}Procedure (long pLength=16, long pFlags=1), virtual')
WHEN  (40) ('Records {15}Procedure (), long, virtual')
WHEN  (41) ('Replace {15}Procedure (string pOldValue, string pNewValue, long pCount=0, long pStart=1, long pEnd=0, long pNoCase=0, bool pRecursive=false), Long, Proc, virtual')
WHEN  (42) ('SetLength {13}Procedure (Long strLen), virtual')
WHEN  (43) ('Slice {17}Procedure (ulong pStart=1, ulong pEnd=0),String, virtual')
WHEN  (44) ('Split {17}Procedure (string pSplitStr,<<string pQuotestart>,<<string pQuoteEnd>, bool removeQuotes = false, bool pClip = false, bool pLeft=false), virtual')
WHEN  (45) ('Sort {18}Procedure (Long pSortType,string pSplitStr,<<string pQuotestart>,<<string pQuoteEnd>, bool pClip = false, bool pLeft=false),Virtual')
WHEN  (46) ('Sort {18}Procedure (Long pSortType),Virtual')
WHEN  (47) ('SplitEvery {12}Procedure (long numChars), virtual')
WHEN  (48) ('Filter {16}Procedure(string pInclude, string pExclude),virtual')
WHEN  (49) ('Sub {19}Procedure (ulong pStart=1, ulong pLength=1), string, virtual')
WHEN  (50) ('ToCstring {13}Procedure (), *cstring, virtual')
WHEN  (51) ('Trace {17}Procedure (<<string errMsg>), virtual')
WHEN  (52) ('Upper {17}Procedure (<<String pQuote>, <<String pQuoteEnd>), virtual')
WHEN  (53) ('Lower {17}Procedure (<<String pQuote>, <<String pQuoteEnd>), virtual')
WHEN  (54) ('FileNameOnly {10}Procedure (<<string fPath>,Long pIncludeExtension=true), string, virtual')
WHEN  (55) ('PathOnly {14}Procedure (<<string fPath>), string, virtual')
WHEN  (56) ('LoadFile {14}Procedure (string fileName,Long pOffset=0, Long pLength=0), long, proc, virtual')
WHEN  (57) ('SaveFile {14}Procedure (string fileName, bool pAppendFlag=false), long, proc, virtual')
WHEN  (58) ('SaveFile {14}Procedure (*string WriteString, string fileName, bool pAppendFlag, long dataLen=0), long, proc, virtual')
WHEN  (59) ('SaveFileA {13}Procedure (string WriteString, string fileName, bool pAppendFlag=false), long, proc, virtual')
WHEN  (60) ('Before {16}Procedure (string pSearchValue, long pStart=1, long pEnd=0, long pNoCase=0), string, virtual')
WHEN  (61) ('Between {15}Procedure (string pLeft, string pRight,long pStart=1, long pEnd=0, long pNoCase=0, long pExclusive=true), string, virtual')
WHEN  (62) ('FindBetween {11}Procedure (string pLeft, string pRight, *long pStart, *long pEnd, bool pNoCase=false, long pExclusive=true), string, virtual')
WHEN  (63) ('After {17}Procedure (string pSearchValue, long pStart=1, long pEnd=0, long pNoCase=0), string, virtual')
WHEN  (64) ('ToBlob {16}Procedure (*blob blobField), long, proc, virtual')
WHEN  (65) ('FromBlob {14}Procedure (*blob blobField), long, proc, virtual')
WHEN  (66) ('AnsiToUtf16 {11}Procedure (*string strAnsi, *long unicodeChars, ulong CodePage=st:CP_US_ASCII), *string, virtual')
WHEN  (67) ('Utf16ToAnsi {11}Procedure (*string unicodeString, *long ansiLen, long unicodeChars=-1, ulong CodePage=st:CP_US_ASCII), *string, virtual')
WHEN  (68) ('Utf8To16 {14}Procedure (*string strUtf8, *long unicodeChars), *string, virtual')
WHEN  (69) ('Utf16To8 {14}Procedure (*string unicodeString, *long utf8Len, long unicodeChars=-1), *string, virtual')
WHEN  (70) ('Utf8ToAnsi {12}Procedure (*string strUtf8, *long ansiLen, ulong pCodePage=st:CP_US_ASCII), *string, virtual')
WHEN  (71) ('AnsiToUtf8 {12}Procedure (*string strAnsi, *long utf8Len, ulong pCodePage=st:CP_US_ASCII), *string, virtual')
WHEN  (72) ('apiUtf8ToAnsi         Procedure (*string strUtf8, *long ansiLen), *string, virtual')
WHEN  (73) ('apiAnsiToUtf8         Procedure (*string strAnsi, *long utf8Len), *string, virtual')
WHEN  (74) ('ToAnsi {16}Procedure (long encoding=0, ulong pCodePage=st:CP_US_ASCII), long, proc, virtual')
WHEN  (75) ('ToUnicode {13}Procedure (long encoding=st:EncodeUtf8, ulong pCodePage=st:CP_US_ASCII), long, proc, virtual')
WHEN  (76) ('DecToBase {13}Procedure (long num, long base=16, long lowerCase=1), string, virtual')
WHEN  (77) ('BaseToDec {13}Procedure (string num, long base=16), long, virtual')
WHEN  (78) ('ByteToHex {13}Procedure (byte pByte), string, virtual')
WHEN  (79) ('HexToByte {13}Procedure (string hexVal), byte, virtual')
WHEN  (80) ('LongToHex {13}Procedure (long pLong), string, virtual')
WHEN  (81) ('StringToHex {11}Procedure (string binData,Long pLen=0,Long pCase=0), *string, virtual')
WHEN  (82) ('HexToString {11}Procedure (string hexData), *string, virtual')
WHEN  (83) ('ToHex {17}Procedure (Long pCase=0), virtual     ')
WHEN  (84) ('FromHex {15}Procedure (), virtual')
WHEN  (85) ('WrapText {14}Procedure(long wrapAt=80), virtual')
WHEN  (86) ('StrCpy {16}Procedure(*string pIn, *string pOut, bool pClip = true), long, proc, virtual')
WHEN  (87) ('ToBytes {15}Procedure (*byte pVal, *string bVals), virtual')
WHEN  (88) ('ToBytes {15}Procedure (*short pVal, *string bVals), virtual')
WHEN  (89) ('ToBytes {15}Procedure (*ushort pVal, *string bVals), virtual')
WHEN  (90) ('ToBytes {15}Procedure (*long pVal, *string bVals), virtual')
WHEN  (91) ('ToBytes {15}Procedure (*ulong pVal, *string bVals), virtual')
WHEN  (92) ('ToBytes {15}Procedure (*sreal pVal, *string bVals), virtual')
WHEN  (93) ('ToBytes {15}Procedure (*real pVal, *string bVals), virtual')
WHEN  (94) ('ToBytes {15}Procedure (*decimal pVal, *string bVals), virtual')
WHEN  (95) ('ToBytes {15}Procedure (*cstring pVal, *string bVals), virtual')
WHEN  (96) ('ToBytes {15}Procedure (*string pVal, *string bVals), virtual')
WHEN  (97) ('FromBytes {13}Procedure (*string bVals, *byte pVal), virtual')
WHEN  (98) ('FromBytes {13}Procedure (*string bVals, *short pVal), virtual')
WHEN  (99) ('FromBytes {13}Procedure (*string bVals, *ushort pVal), virtual')
WHEN  (100) ('FromBytes {13}Procedure (*string bVals, *long pVal), virtual')
WHEN  (101) ('FromBytes {13}Procedure (*string bVals, *ulong pVal), virtual')
WHEN  (102) ('FromBytes {13}Procedure (*string bVals, *sreal pVal), virtual')
WHEN  (103) ('FromBytes {13}Procedure (*string bVals, *real pVal), virtual')
WHEN  (104) ('FromBytes {13}Procedure (*string bVals, *decimal pVal), virtual')
WHEN  (105) ('FromBytes {13}Procedure (*string bVals, *cstring pVal), virtual')
WHEN  (106) ('FromBytes {13}Procedure (*string bVals, *string pVal), virtual')
WHEN  (107) ('SetBytes {14}Procedure (*byte pVal), virtual')
WHEN  (108) ('SetBytes {14}Procedure (*short pVal), virtual')
WHEN  (109) ('SetBytes {14}Procedure (*ushort pVal), virtual')
WHEN  (110) ('SetBytes {14}Procedure (*long pVal), virtual')
WHEN  (111) ('SetBytes {14}Procedure (*ulong pVal), virtual')
WHEN  (112) ('SetBytes {14}Procedure (*sreal pVal), virtual')
WHEN  (113) ('SetBytes {14}Procedure (*real pVal), virtual')
WHEN  (114) ('SetBytes {14}Procedure (*decimal pVal), virtual')
WHEN  (115) ('SetBytes {14}Procedure (*cstring pVal), virtual')
WHEN  (116) ('SetBytes {14}Procedure (*string pVal), virtual')
WHEN  (117) ('GetBytes {14}Procedure (*byte pVal), virtual')
WHEN  (118) ('GetBytes {14}Procedure (*short pVal), virtual')
WHEN  (119) ('GetBytes {14}Procedure (*ushort pVal), virtual')
WHEN  (120) ('GetBytes {14}Procedure (*long pVal), virtual')
WHEN  (121) ('GetBytes {14}Procedure (*ulong pVal), virtual')
WHEN  (122) ('GetBytes {14}Procedure (*sreal pVal), virtual')
WHEN  (123) ('GetBytes {14}Procedure (*real pVal), virtual')
WHEN  (124) ('GetBytes {14}Procedure (*decimal pVal), virtual')
WHEN  (125) ('GetBytes {14}Procedure (*cstring pVal), virtual')
WHEN  (126) ('GetBytes {14}Procedure (*string pVal), virtual')
WHEN  (127) ('SetBytes {14}Procedure (*? pVal, string pType), bool, proc, virtual')
WHEN  (128) ('GetBytes {14}Procedure (*? pVal, string pType), bool, proc, virtual')
WHEN  (129) ('FindWord {14}Procedure(long pWordNumber,long startPos = -1, bool htmlEnc=false,*Long pStart, *Long pEnd), string, virtual')
WHEN  (130) ('GetWord {15}Procedure (long pWordNumber,long startPos = -1, bool htmlEnc=false), string, virtual')
WHEN  (131) ('Word {18}Procedure (long pWordNumber,long startPos = -1, bool htmlEnc=false), string, virtual')
WHEN  (132) ('WordStart {13}Procedure (long pStartPos=1, long textType=0,Long pDir=st:Forwards), long, virtual')
WHEN  (133) ('WordEnd {15}Procedure (long pStartPos=1, long textType=0), long, virtual')
WHEN  (134) ('CountWords {12}Procedure (long startPos = 1, bool htmlEnc=false), long, virtual')
WHEN  (135) ('RemoveAttributes      Procedure (String pTag), virtual')
WHEN  (136) ('Remove {16}Procedure(string pLeft,<<string pRight>,long pNoCase=0,long pContentsOnly=0, long pCount=0), Long,Proc,virtual')
WHEN  (137) ('Clip {18}Procedure (), virtual')
WHEN  (138) ('Trim {18}Procedure (), virtual')
WHEN  (139) ('Left {18}Procedure(Long pLength=0,Long pwhat=1,<<String pPad>),String, virtual')
WHEN  (140) ('SetLeft {15}Procedure(Long pLength=0,Long pwhat=1,<<String pPad>), virtual')
WHEN  (141) ('Right {17}Procedure(Long pLength=0,Long pwhat=1,<<String pPad>),String, virtual')
WHEN  (142) ('SetRight {14}Procedure(Long pLength=0,Long pwhat=1,<<String pPad>), virtual')
WHEN  (143) ('All {19}Procedure(Long pLength=255),String, virtual')
WHEN  (144) ('SetAll {16}Procedure(Long pLength=255), virtual')
WHEN  (145) ('Squeeze {15}Procedure (long textType=ST:TEXT), virtual')
WHEN  (146) ('ContainsADigit        Procedure (), bool, virtual')
WHEN  (147) ('IsAllDigits {11}Procedure (), bool, virtual')
WHEN  (148) ('ContainsA {13}Procedure (String pDigits,<<String pTestString>), bool, virtual')
WHEN  (149) ('IsAll {17}Procedure (String pDigits,<<String pTestString>), bool, virtual')
WHEN  (150) ('SwitchEndian {10}Procedure (ulong x), long, virtual')
WHEN  (151) ('BigEndian {13}Procedure (ulong x), long, virtual')
WHEN  (152) ('LittleEndian {10}Procedure (ulong x), long, virtual')
WHEN  (153) ('ReverseByteOrder      Procedure (), virtual')
WHEN  (154) ('Str {19}Procedure (), string, virtual')
WHEN  (155) ('Str {19}Procedure (string newValue),  string, proc, virtual')
WHEN  (156) ('Str {19}Procedure (*string newValue), string, proc, virtual')
WHEN  (157) ('SetSlice {14}Procedure (ulong pStart=1, ulong pEnd=0, string newValue), virtual')
WHEN  (158) ('Insert {16}Procedure (ulong pStart, string insertValue), virtual')
WHEN  (159) ('Quote {17}Procedure (<<string pQuotestart>,<<string pQuoteEnd>), virtual')
WHEN  (160) ('UnQuote {15}Procedure (<<string pQuotestart>,<<string pQuoteEnd>), virtual')
WHEN  (161) ('FindChar {14}Procedure (string pSearchValue, long pStart=1, long pEnd=0), long, virtual')
WHEN  (162) ('FindChars {13}Procedure (string pSearchValue, long pStart=1, long pEnd=0), long, virtual')
WHEN  (163) ('ColorToHex {12}Function (long claColor, bool addHash=false), string, virtual')
WHEN  (164) ('ColorFromHex {10}Function (string hexCol), long, virtual')
WHEN  (165) ('UrlEncode {13}Procedure (long flags =0,<<String pDelimiter>,<<String pSpace>), virtual')
WHEN  (166) ('UrlDecode {13}Procedure (<<String pDelimiter>,<<String pSpace>), virtual')
WHEN  (167) ('CleanFileName         Procedure (<<string pFileName>, <<string pReplaceChar>), string, virtual')
WHEN  (168) ('PeekRam {15}Procedure(uLong pAdr,Long pLen),Virtual')
WHEN  (169) ('loadlibs {14}Procedure(),Virtual')
WHEN  (170) ('gzip {18}Procedure(Long pLevel=5),Long,Virtual,Proc')
WHEN  (171) ('gunzip {16}Procedure(),Long,Virtual,Proc')
WHEN  (172) ('MergeXml {14}Procedure(String pNew, Long pWhere),Virtual')
WHEN  (173) ('LineEndings {11}Procedure(Long pEndings=1), Virtual')
WHEN  (174) ('IsTime {16}PROCEDURE (String pValue),Long, Virtual')
WHEN  (175) ('IsTime {16}PROCEDURE (),Long, Virtual')
WHEN  (176) ('DeformatTime {10}PROCEDURE (String pValue),String, Virtual')
WHEN  (177) ('DeformatTime {10}PROCEDURE (),Virtual')
WHEN  (178) ('FormatTime {12}PROCEDURE (String pFormat),Virtual')
WHEN  (179) ('FormatTime {12}PROCEDURE (Long pValue,string pFormat),String,Virtual')
WHEN  (180) ('StartsWith {12}Procedure (String pStr,Long pCase=True),Long,Virtual')
WHEN  (181) ('EndsWith {14}Procedure (String pStr,Long pCase=True),Long,Virtual')

%dClassVersion DEFAULT  ('77988')
[PERSIST]
%GenerationCompleted DEPEND %Module DEFAULT TIMES 2
WHEN  ('Main_water.clw') ('1')
WHEN  ('water.clw') ('1')

%LastTarget32 DEFAULT  ('1')
%LastProgramExtension DEFAULT  ('EXE')
%LastApplicationDebug DEFAULT  ('')
%LastApplicationLocalLibrary DEFAULT  ('')
[PROJECT]
-- NAMESPACE water
#system win32 exe
#model clarion dll
#pragma define(_wtrLinkMode_=>1)
#pragma define(_wtrDllMode_=>0)
#pragma define(xFilesLinkMode=>1) -- GENERATED
#pragma define(xFilesDllMode=>0) -- GENERATED
#pragma define(NETTALKLOG=>1) -- GENERATED
#pragma define(_ODDJOB_=>0) -- GENERATED
#pragma define(_STRINGTHEORY_=>1) -- GENERATED
#pragma define(StringTheoryLinkMode=>1) -- GENERATED
#pragma define(StringTheoryDllMode=>0) -- GENERATED
#pragma define(MD5=>0) -- GENERATED
#pragma define(_ABCDllMode_=>0) -- GENERATED
#pragma define(_ABCLinkMode_=>1) -- GENERATED
#pragma define(_NetTalkDllMode_=>0) -- GENERATED
#pragma define(_NetTalkLinkMode_=>1) -- GENERATED
#compile "water.clw" -- GENERATED
#compile "Main_water.clw" -- GENERATED
#compile "water_RD.CLW" -- GENERATED
#compile "water_RU.CLW" -- GENERATED
#compile "water_SF.CLW" -- GENERATED
#pragma link("C%V%dos%X%%L%.lib") -- GENERATED
#link "water.EXE"
